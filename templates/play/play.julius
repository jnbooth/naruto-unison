"use strict";

/**
 * @typedef {Object} Line
 * @property {SVGPathElement} path
 */

/** @type {Line} */
let prog

/** @type {HTMLDivElement} */
let vol

/** @type {WebSocket} */
let conn

function nullary(x) {
    if (x === null || typeof x !== "object")
        return

    for (const k in x)
        nullary(x[k])

    if (x.tag !== undefined && x.contents === undefined)
        x.contents = []

    return x
}

const user = #{toJSON muser}

const app = Elm.Main.init({
    flags: {
        url:          document.location.origin + "/",
        bg:           #{toJSON bg},
        userTeam:     nullary(#{toJSON team}),
        userPractice: nullary(#{toJSON practice}),
        unlocked:     #{toJSON unlocked},
        user:         #{toJSON muser},
        avatars:      #{avatars},
        characters:   nullary(#{Characters.listJSON}),
        red:          #{toJSON red},
        blue:         #{toJSON blue},
        visibles:     #{Class.visiblesList},
        csrf:         #{fromMaybe "" token},
        csrfParam:    #{defaultCsrfParamName} //Cookies.get("XSRF-TOKEN")
    }
})
app.ports.sounds.subscribe(sounds => {
    vol = document.createElement("div")
    vol.id = "volume"
    document.body.appendChild(vol)
    vol.className = #{vol}
    vol.onclick = function() {
        const muted = this.className === "click muted"
        this.className = muted ? "click unmuted" : "click muted"
        if (muted)
            createjs.Sound.play("SFXClick")
        if (user) {
            const xmlhttp = new XMLHttpRequest()
            xmlhttp.open("GET", "/api/mute/" + (muted ? "False" : "True"), true)
            xmlhttp.send()
        }
    }
    createjs.Sound.registerSounds(sounds.map(file => ({src: file + ".ogg", id: file })), "audio/")
})
app.ports.sound.subscribe(sound => {
    if (vol && vol.className !== "click muted")
        createjs.Sound.play(sound)
})

/** @type {?number[]} */
let queuedProgress

/** @param {number[]} args */
function progress(args) {
    const duration = args[0]
    const from     = args[1]
    const to       = args[2]

    if (prog === undefined)
        return queuedProgress = args

    if (from < to)
        prog.path.setAttribute('stroke','#555')
    else
        prog.path.setAttribute('stroke','#0099ff')

    prog.set(from)

    if (duration > 0)
        prog.animate(to, { duration: duration })
}
app.ports.progress.subscribe(progress)

const barOpts = { color: '#0099ff', fill: '#111' }
new MutationObserver(mutations => {
    for (const mutation of mutations)
        if (mutation.addedNodes)
            for (const addedNode of mutation.addedNodes.values())
                if (addedNode.id === "game") {
                    prog = new ProgressBar.Line("#ready", barOpts)
                    if (queuedProgress !== undefined) {
                        progress(queuedProgress)
                        queuedProgress = undefined
                    }
                }
}).observe(document.getElementById("main"), { childList: true })

app.ports.websocketSend.subscribe(msg => {
    if (conn !== undefined && conn.readyState !== 1) {
        conn.close()
        conn = undefined
    }
    if (conn === undefined) {
        conn = new WebSocket(document.URL.replace(/^http/g, "ws"))
        conn.onopen = x => conn.send(msg)
        conn.onmessage = x => {
            const data = JSON.parse(x.data)
            if (data.tag === "Fail")
                console.log(`Received ${data.contents.tag}: ${data.contents.contents}`)
            app.ports.websocketReceive.send(x.data)
        }
    } else {
        conn.send(msg)
    }

})
